// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "Hello2.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var Hello = Hello || {};
module.exports.Hello = Hello;

Hello.TestProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

Hello.TestProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

Hello.TestProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

Hello.TestProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

Hello.TestProxy.prototype.getVersion = function () {
    return this._worker.version;
};

Hello.AddReq = function() {
    this.iNum1 = 0;
    this.iNum2 = 0;
    this.sMsg = "a  {} () <> bc";
    this._classname = "Hello.AddReq";
};
Hello.AddReq._classname = "Hello.AddReq";
Hello.AddReq._write = function (os, tag, value) { os.writeStruct(tag, value); };
Hello.AddReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
Hello.AddReq._readFrom = function (is) {
    var tmp = new Hello.AddReq;
    tmp.iNum1 = is.readInt32(0, true, 0);
    tmp.iNum2 = is.readInt32(1, true, 0);
    tmp.sMsg = is.readString(2, true, "a  {} () <> bc");
    return tmp;
};
Hello.AddReq.prototype._writeTo = function (os) {
    os.writeInt32(0, this.iNum1);
    os.writeInt32(1, this.iNum2);
    os.writeString(2, this.sMsg);
};
Hello.AddReq.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
Hello.AddReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
Hello.AddReq.prototype.toObject = function() { 
    return {
        "iNum1" : this.iNum1,
        "iNum2" : this.iNum2,
        "sMsg" : this.sMsg
    };
};
Hello.AddReq.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "iNum1") && (this.iNum1 = json.iNum1);
    _hasOwnProperty.call(json, "iNum2") && (this.iNum2 = json.iNum2);
    _hasOwnProperty.call(json, "sMsg") && (this.sMsg = json.sMsg);
    return this;
};
Hello.AddReq.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
Hello.AddReq.new = function () {
    return new Hello.AddReq();
};
Hello.AddReq.create = function (is) {
    return Hello.AddReq._readFrom(is);
};

Hello.AddRsp = function() {
    this.iRet = 0;
    this.iResult = 0;
    this.sMsg = "";
    this._classname = "Hello.AddRsp";
};
Hello.AddRsp._classname = "Hello.AddRsp";
Hello.AddRsp._write = function (os, tag, value) { os.writeStruct(tag, value); };
Hello.AddRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
Hello.AddRsp._readFrom = function (is) {
    var tmp = new Hello.AddRsp;
    tmp.iRet = is.readInt32(0, true, 0);
    tmp.iResult = is.readInt32(1, true, 0);
    tmp.sMsg = is.readString(2, true, "");
    return tmp;
};
Hello.AddRsp.prototype._writeTo = function (os) {
    os.writeInt32(0, this.iRet);
    os.writeInt32(1, this.iResult);
    os.writeString(2, this.sMsg);
};
Hello.AddRsp.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
Hello.AddRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
Hello.AddRsp.prototype.toObject = function() { 
    return {
        "iRet" : this.iRet,
        "iResult" : this.iResult,
        "sMsg" : this.sMsg
    };
};
Hello.AddRsp.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "iRet") && (this.iRet = json.iRet);
    _hasOwnProperty.call(json, "iResult") && (this.iResult = json.iResult);
    _hasOwnProperty.call(json, "sMsg") && (this.sMsg = json.sMsg);
    return this;
};
Hello.AddRsp.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
Hello.AddRsp.new = function () {
    return new Hello.AddRsp();
};
Hello.AddRsp.create = function (is) {
    return Hello.AddRsp._readFrom(is);
};

var __Hello_Test$add$IF = {
    "name" : "add",
    "return" : "int32",
    "arguments" : [{
        "name" : "stReq",
        "class" : "Hello.AddReq",
        "direction" : "in"
    }, {
        "name" : "stRsp",
        "class" : "Hello.AddRsp",
        "direction" : "out"
    }]
};

var __Hello_Test$add$IE = function (stReq) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, stReq);
    return os.getBinBuffer();
};

var __Hello_Test$add$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "stRsp" : is.readStruct(2, true, Hello.AddRsp)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __Hello_Test$add$PE = function (stReq, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("stReq", stReq);
    return tup;
};

var __Hello_Test$add$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "stRsp" : tup.readStruct("stRsp", Hello.AddRsp)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __Hello_Test$add$ER = function (data) {
    throw _makeError(data, "Call Test::add failed");
};

Hello.TestProxy.prototype.add = function (stReq) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("add", __Hello_Test$add$PE(stReq, version), arguments[arguments.length - 1], __Hello_Test$add$IF).then(__Hello_Test$add$PD, __Hello_Test$add$ER);
    } else {
        return this._worker.tars_invoke("add", __Hello_Test$add$IE(stReq), arguments[arguments.length - 1], __Hello_Test$add$IF).then(__Hello_Test$add$ID, __Hello_Test$add$ER);
    }
};
Hello.TestProxy.add = __Hello_Test$add$IF;



