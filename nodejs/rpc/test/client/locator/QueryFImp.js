// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "QueryF.tars" by Imp Mode
// **********************************************************************

"use strict";

var tars = require("./QueryF.js").tars;
var EndpointF = require("./EndpointFTars.js").tars.EndpointF;
var TarsStream = require("@tars/stream");
var config  = require("../config.json");
var Endpoint = require("@tars/utils").Endpoint

module.exports.tars = tars;

function createEndpointObj(endpointStr){
    var endpointConfig = Endpoint.parse(endpointStr)
    var endpoint = new EndpointF()
    endpoint.readFromObject({
        host: endpointConfig.sHost,
        port: endpointConfig.iPort,
        timeout: endpointConfig.iTimeout,
        istcp: 1
    });
    return endpoint
}

tars.QueryFImp.prototype.initialize = function () {
    //TODO::
};

tars.QueryFImp.prototype.findObjectById = function (current, id) {
    //TODO::
};

tars.QueryFImp.prototype.findObjectById4Any = function (current, id, activeEp, inactiveEp) {
    //TODO::
};

tars.QueryFImp.prototype.findObjectById4All = function (current, id, activeEp, inactiveEp) {
    //TODO::
};

tars.QueryFImp.prototype.findObjectByIdInSameGroup = function (current, id, activeEp, inactiveEp) {
    activeEp = TarsStream.List(EndpointF);
    inactiveEp = TarsStream.List(EndpointF);
    config.mockServer.activeEndpoints.forEach((item)=>{
        activeEp.push(createEndpointObj(item))
    })
    config.mockServer.inactiveEndpoints.forEach((item)=>{
        inactiveEp.push(createEndpointObj(item))
    })
    current.sendResponse(0, activeEp, inactiveEp);
};

tars.QueryFImp.prototype.findObjectByIdInSameStation = function (current, id, sStation, activeEp, inactiveEp) {
    //TODO::
};

tars.QueryFImp.prototype.findObjectByIdInSameSet = function (current, id, setId, activeEp, inactiveEp) {
    //TODO::
};


