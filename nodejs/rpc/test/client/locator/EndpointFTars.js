// **********************************************************************
// Parsed By TarsParser(1.1.0), Generated By tars2node(20190529)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "EndpointF.tars" by Relation Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var TarsStream = require("@tars/stream");

var _hasOwnProperty = Object.prototype.hasOwnProperty;

var tars = tars || {};
module.exports.tars = tars;

tars.EndpointF = function() {
    this.host = "";
    this.port = 0;
    this.timeout = 0;
    this.istcp = 0;
    this.grid = 0;
    this.groupworkid = 0;
    this.grouprealid = 0;
    this.setId = "";
    this.qos = 0;
    this.bakFlag = 0;
    this.gridFlag = 0;
    this.weight = 0;
    this.weightType = 0;
    this.cpuload = 0;
    this.sampletime = 0;
    this.containerName = "";
    this.grayFlag = 0;
    this.benchmarkType = 0;
    this.authType = 0;
    this._classname = "tars.EndpointF";
};
tars.EndpointF._classname = "tars.EndpointF";
tars.EndpointF._write = function (os, tag, value) { os.writeStruct(tag, value); };
tars.EndpointF._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
tars.EndpointF._readFrom = function (is) {
    var tmp = new tars.EndpointF;
    tmp.host = is.readString(0, true, "");
    tmp.port = is.readInt32(1, true, 0);
    tmp.timeout = is.readInt32(2, true, 0);
    tmp.istcp = is.readInt32(3, true, 0);
    tmp.grid = is.readInt32(4, true, 0);
    tmp.groupworkid = is.readInt32(5, false, 0);
    tmp.grouprealid = is.readInt32(6, false, 0);
    tmp.setId = is.readString(7, false, "");
    tmp.qos = is.readInt32(8, false, 0);
    tmp.bakFlag = is.readInt32(9, false, 0);
    tmp.gridFlag = is.readInt32(10, false, 0);
    tmp.weight = is.readInt32(11, false, 0);
    tmp.weightType = is.readInt32(12, false, 0);
    tmp.cpuload = is.readInt32(13, false, 0);
    tmp.sampletime = is.readInt64(14, false, 0);
    tmp.containerName = is.readString(15, false, "");
    tmp.grayFlag = is.readInt32(16, false, 0);
    tmp.benchmarkType = is.readInt32(17, false, 0);
    tmp.authType = is.readInt32(19, false, 0);
    return tmp;
};
tars.EndpointF.prototype._writeTo = function (os) {
    os.writeString(0, this.host);
    os.writeInt32(1, this.port);
    os.writeInt32(2, this.timeout);
    os.writeInt32(3, this.istcp);
    os.writeInt32(4, this.grid);
    os.writeInt32(5, this.groupworkid);
    os.writeInt32(6, this.grouprealid);
    os.writeString(7, this.setId);
    os.writeInt32(8, this.qos);
    os.writeInt32(9, this.bakFlag);
    os.writeInt32(10, this.gridFlag);
    os.writeInt32(11, this.weight);
    os.writeInt32(12, this.weightType);
    os.writeInt32(13, this.cpuload);
    os.writeInt64(14, this.sampletime);
    os.writeString(15, this.containerName);
    os.writeInt32(16, this.grayFlag);
    os.writeInt32(17, this.benchmarkType);
    os.writeInt32(19, this.authType);
};
tars.EndpointF.prototype._equal = function (anItem) {
    return this.host === anItem.host && 
        this.port === anItem.port && 
        this.timeout === anItem.timeout && 
        this.istcp === anItem.istcp && 
        this.grid === anItem.grid && 
        this.qos === anItem.qos && 
        this.gridFlag === anItem.gridFlag && 
        this.weight === anItem.weight && 
        this.weightType === anItem.weightType;
};
tars.EndpointF.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
tars.EndpointF.prototype.toObject = function() { 
    return {
        "host" : this.host,
        "port" : this.port,
        "timeout" : this.timeout,
        "istcp" : this.istcp,
        "grid" : this.grid,
        "groupworkid" : this.groupworkid,
        "grouprealid" : this.grouprealid,
        "setId" : this.setId,
        "qos" : this.qos,
        "bakFlag" : this.bakFlag,
        "gridFlag" : this.gridFlag,
        "weight" : this.weight,
        "weightType" : this.weightType,
        "cpuload" : this.cpuload,
        "sampletime" : this.sampletime,
        "containerName" : this.containerName,
        "grayFlag" : this.grayFlag,
        "benchmarkType" : this.benchmarkType,
        "authType" : this.authType
    };
};
tars.EndpointF.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "host") && (this.host = json.host);
    _hasOwnProperty.call(json, "port") && (this.port = json.port);
    _hasOwnProperty.call(json, "timeout") && (this.timeout = json.timeout);
    _hasOwnProperty.call(json, "istcp") && (this.istcp = json.istcp);
    _hasOwnProperty.call(json, "grid") && (this.grid = json.grid);
    _hasOwnProperty.call(json, "groupworkid") && (this.groupworkid = json.groupworkid);
    _hasOwnProperty.call(json, "grouprealid") && (this.grouprealid = json.grouprealid);
    _hasOwnProperty.call(json, "setId") && (this.setId = json.setId);
    _hasOwnProperty.call(json, "qos") && (this.qos = json.qos);
    _hasOwnProperty.call(json, "bakFlag") && (this.bakFlag = json.bakFlag);
    _hasOwnProperty.call(json, "gridFlag") && (this.gridFlag = json.gridFlag);
    _hasOwnProperty.call(json, "weight") && (this.weight = json.weight);
    _hasOwnProperty.call(json, "weightType") && (this.weightType = json.weightType);
    _hasOwnProperty.call(json, "cpuload") && (this.cpuload = json.cpuload);
    _hasOwnProperty.call(json, "sampletime") && (this.sampletime = json.sampletime);
    _hasOwnProperty.call(json, "containerName") && (this.containerName = json.containerName);
    _hasOwnProperty.call(json, "grayFlag") && (this.grayFlag = json.grayFlag);
    _hasOwnProperty.call(json, "benchmarkType") && (this.benchmarkType = json.benchmarkType);
    _hasOwnProperty.call(json, "authType") && (this.authType = json.authType);
    return this;
};
tars.EndpointF.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
tars.EndpointF.new = function () {
    return new tars.EndpointF();
};
tars.EndpointF.create = function (is) {
    return tars.EndpointF._readFrom(is);
};


