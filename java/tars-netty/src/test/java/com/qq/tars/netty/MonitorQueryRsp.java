// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.7.2.
// **********************************************************************

package com.qq.tars.netty;

import com.qq.tars.protocol.tars.TarsInputStream;
import com.qq.tars.protocol.tars.TarsOutputStream;
import com.qq.tars.protocol.tars.annotation.TarsStruct;
import com.qq.tars.protocol.tars.annotation.TarsStructProperty;
import com.qq.tars.protocol.util.TarsUtil;

@TarsStruct
public class MonitorQueryRsp {

    @TarsStructProperty(order = 0, isRequire = true)
    public int ret = 0;
    @TarsStructProperty(order = 1, isRequire = false)
    public String msg = "";
    @TarsStructProperty(order = 2, isRequire = true)
    public String lastTime = "";
    @TarsStructProperty(order = 3, isRequire = true)
    public int activeDb = 0;
    @TarsStructProperty(order = 4, isRequire = true)
    public int totalDb = 0;
    @TarsStructProperty(order = 5, isRequire = true)
    public java.util.List<Integer> retThreads = null;
    @TarsStructProperty(order = 6, isRequire = false)
    public java.util.Map<String, java.util.List<Double>> result = null;
    @TarsStructProperty(order = 7, isRequire = false)
    public int intervalTime = 5;
    @TarsStructProperty(order = 8, isRequire = false)
    public int dateType = 0;

    public int getRet() {
        return ret;
    }

    public void setRet(int ret) {
        this.ret = ret;
    }

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public String getLastTime() {
        return lastTime;
    }

    public void setLastTime(String lastTime) {
        this.lastTime = lastTime;
    }

    public int getActiveDb() {
        return activeDb;
    }

    public void setActiveDb(int activeDb) {
        this.activeDb = activeDb;
    }

    public int getTotalDb() {
        return totalDb;
    }

    public void setTotalDb(int totalDb) {
        this.totalDb = totalDb;
    }

    public java.util.List<Integer> getRetThreads() {
        return retThreads;
    }

    public void setRetThreads(java.util.List<Integer> retThreads) {
        this.retThreads = retThreads;
    }

    public java.util.Map<String, java.util.List<Double>> getResult() {
        return result;
    }

    public void setResult(java.util.Map<String, java.util.List<Double>> result) {
        this.result = result;
    }

    public int getIntervalTime() {
        return intervalTime;
    }

    public void setIntervalTime(int intervalTime) {
        this.intervalTime = intervalTime;
    }

    public int getDateType() {
        return dateType;
    }

    public void setDateType(int dateType) {
        this.dateType = dateType;
    }

    public MonitorQueryRsp() {
    }

    public MonitorQueryRsp(int ret, String msg, String lastTime, int activeDb, int totalDb, java.util.List<Integer> retThreads, java.util.Map<String, java.util.List<Double>> result, int intervalTime, int dateType) {
        this.ret = ret;
        this.msg = msg;
        this.lastTime = lastTime;
        this.activeDb = activeDb;
        this.totalDb = totalDb;
        this.retThreads = retThreads;
        this.result = result;
        this.intervalTime = intervalTime;
        this.dateType = dateType;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + TarsUtil.hashCode(ret);
        result = prime * result + TarsUtil.hashCode(msg);
        result = prime * result + TarsUtil.hashCode(lastTime);
        result = prime * result + TarsUtil.hashCode(activeDb);
        result = prime * result + TarsUtil.hashCode(totalDb);
        result = prime * result + TarsUtil.hashCode(retThreads);
        result = prime * result + TarsUtil.hashCode(result);
        result = prime * result + TarsUtil.hashCode(intervalTime);
        result = prime * result + TarsUtil.hashCode(dateType);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof MonitorQueryRsp)) {
            return false;
        }
        MonitorQueryRsp other = (MonitorQueryRsp) obj;
        return (
                TarsUtil.equals(ret, other.ret) &&
                        TarsUtil.equals(msg, other.msg) &&
                        TarsUtil.equals(lastTime, other.lastTime) &&
                        TarsUtil.equals(activeDb, other.activeDb) &&
                        TarsUtil.equals(totalDb, other.totalDb) &&
                        TarsUtil.equals(retThreads, other.retThreads) &&
                        TarsUtil.equals(result, other.result) &&
                        TarsUtil.equals(intervalTime, other.intervalTime) &&
                        TarsUtil.equals(dateType, other.dateType)
        );
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("MonitorQueryRsp(");
        sb.append("ret:");
        sb.append(this.ret);
        sb.append(", ");
        sb.append("msg:");
        if (this.msg == null) {
            sb.append("null");
        } else {
            sb.append(this.msg);
        }
        sb.append(", ");
        sb.append("lastTime:");
        if (this.lastTime == null) {
            sb.append("null");
        } else {
            sb.append(this.lastTime);
        }
        sb.append(", ");
        sb.append("activeDb:");
        sb.append(this.activeDb);
        sb.append(", ");
        sb.append("totalDb:");
        sb.append(this.totalDb);
        sb.append(", ");
        sb.append("retThreads:");
        if (this.retThreads == null) {
            sb.append("null");
        } else {
            sb.append(this.retThreads);
        }
        sb.append(", ");
        sb.append("result:");
        if (this.result == null) {
            sb.append("null");
        } else {
            sb.append(this.result);
        }
        sb.append(", ");
        sb.append("intervalTime:");
        sb.append(this.intervalTime);
        sb.append(", ");
        sb.append("dateType:");
        sb.append(this.dateType);
        sb.append(")");
        return sb.toString();
    }

    public void writeTo(TarsOutputStream _os) {
        _os.write(ret, 0);
        if (null != msg) {
            _os.write(msg, 1);
        }
        _os.write(lastTime, 2);
        _os.write(activeDb, 3);
        _os.write(totalDb, 4);
        _os.write(retThreads, 5);
        if (null != result) {
            _os.write(result, 6);
        }
        _os.write(intervalTime, 7);
        _os.write(dateType, 8);
    }

    static java.util.List<Integer> cache_retThreads;

    static {
        cache_retThreads = new java.util.ArrayList<Integer>();
        int var_4 = 0;
        cache_retThreads.add(var_4);
    }

    static java.util.Map<String, java.util.List<Double>> cache_result;

    static {
        cache_result = new java.util.HashMap<String, java.util.List<Double>>();
        String var_5 = "";
        java.util.List<Double> var_6 = new java.util.ArrayList<Double>();
        double var_7 = 0D;
        var_6.add(var_7);
        cache_result.put(var_5, var_6);
    }

    public void readFrom(TarsInputStream _is) {
        this.ret = _is.read(ret, 0, true);
        this.msg = _is.readString(1, false);
        this.lastTime = _is.readString(2, true);
        this.activeDb = _is.read(activeDb, 3, true);
        this.totalDb = _is.read(totalDb, 4, true);
        this.retThreads = (java.util.List<Integer>) _is.read(cache_retThreads, 5, true);
        this.result = (java.util.Map<String, java.util.List<Double>>) _is.read(cache_result, 6, false);
        this.intervalTime = _is.read(intervalTime, 7, false);
        this.dateType = _is.read(dateType, 8, false);
    }

}
